using UnityEngine;
using UnityEditor;
using System.Collections.Generic;

[CustomEditor(typeof(TrackSpawnerWithDependenciesV2))]
public class TrackSpawnerEditor : Editor
{
    public override void OnInspectorGUI()
    {
        DrawDefaultInspector();

        TrackSpawnerWithDependenciesV2 spawner = (TrackSpawnerWithDependenciesV2)target;

        EditorGUILayout.Space(10);
        EditorGUILayout.LabelField("=== AUTO SETUP TOOLS ===", EditorStyles.boldLabel);

        if (GUILayout.Button("🔄 Auto-Assign Categories by Key"))
        {
            AutoAssignCategories(spawner);
            Debug.Log("✅ Categories auto-assigned based on key names.");
        }

        if (GUILayout.Button("🧩 Auto-Generate Incompatibilities"))
        {
            AutoGenerateDependencies(spawner);
            Debug.Log("✅ Incompatibilities auto-generated by category.");
        }

        if (GUILayout.Button("📦 Sync with PoolManager"))
        {
            SyncWithPool(spawner);
            Debug.Log("✅ Synced with PoolManager pools.");
        }

        EditorGUILayout.Space(10);
    }

    private void AutoAssignCategories(TrackSpawnerWithDependenciesV2 spawner)
    {
        void Assign(List<TrackSpawnerWithDependenciesV2.SpawnRule> list)
        {
            foreach (var r in list)
            {
                if (r == null) continue;
                string key = r.key.ToLower();

                if (key.Contains("low")) r.category = "ObstacleLow";
                else if (key.Contains("high")) r.category = "ObstacleHigh";
                else if (key.Contains("enemy")) r.category = "Enemy";
                else if (key.Contains("boss")) r.category = "Boss";
                else if (key.Contains("coin")) r.category = "PickupCoin";
                else if (key.Contains("energy")) r.category = "PickupEnergy";
                else if (key.Contains("shuriken")) r.category = "PickupWeapon";
                else r.category = "Misc";
            }
        }

        Assign(spawner.lowObstacleRules);
        Assign(spawner.highObstacleRules);
        Assign(spawner.enemyRules);
        Assign(spawner.pickupRules);
        Assign(spawner.bossRules);

        EditorUtility.SetDirty(spawner);
    }

    private void AutoGenerateDependencies(TrackSpawnerWithDependenciesV2 spawner)
    {
        var rules = new List<TrackSpawnerWithDependenciesV2.SpawnRule>();
        rules.AddRange(spawner.lowObstacleRules);
        rules.AddRange(spawner.highObstacleRules);
        rules.AddRange(spawner.enemyRules);
        rules.AddRange(spawner.pickupRules);
        rules.AddRange(spawner.bossRules);

        foreach (var r in rules)
        {
            if (r == null) continue;
            if (r.incompatibleCategories == null)
                r.incompatibleCategories = new List<string>();

            r.incompatibleCategories.Clear();

            switch (r.category)
            {
                case "ObstacleLow":
                    r.incompatibleCategories.AddRange(new[] { "ObstacleHigh", "Enemy", "Boss", "PickupCoin", "PickupEnergy", "PickupWeapon" });
                    break;
                case "ObstacleHigh":
                    r.incompatibleCategories.AddRange(new[] { "ObstacleLow", "Enemy", "Boss", "PickupCoin", "PickupEnergy", "PickupWeapon" });
                    break;
                case "Enemy":
                    r.incompatibleCategories.AddRange(new[] { "ObstacleLow", "ObstacleHigh", "Boss", "PickupCoin", "PickupEnergy", "PickupWeapon" });
                    break;
                case "Boss":
                    r.incompatibleCategories.AddRange(new[] { "Enemy", "ObstacleLow", "ObstacleHigh", "PickupCoin", "PickupEnergy", "PickupWeapon" });
                    break;
                case "PickupCoin":
                case "PickupEnergy":
                case "PickupWeapon":
                    r.incompatibleCategories.AddRange(new[] { "Enemy", "Boss" });
                    break;
            }
        }

        EditorUtility.SetDirty(spawner);
    }

    private void SyncWithPool(TrackSpawnerWithDependenciesV2 spawner)
    {
        PoolManager pool = FindObjectOfType<PoolManager>();
        if (pool == null)
        {
            Debug.LogWarning("⚠️ PoolManager not found in scene!");
            return;
        }

        List<TrackSpawnerWithDependenciesV2.SpawnRule> existing = new();
        existing.AddRange(spawner.lowObstacleRules);
        existing.AddRange(spawner.highObstacleRules);
        existing.AddRange(spawner.enemyRules);
        existing.AddRange(spawner.pickupRules);
        existing.AddRange(spawner.bossRules);

        foreach (var p in pool.pools)
        {
            bool exists = existing.Exists(r => r.key == p.key);
            if (!exists)
            {
                var newRule = new TrackSpawnerWithDependenciesV2.SpawnRule
                {
                    key = p.key,
                    weight = 1f,
                    category = "Auto"
                };

                // автоматически распределяем по категориям
                if (p.key.ToLower().Contains("low")) spawner.lowObstacleRules.Add(newRule);
                else if (p.key.ToLower().Contains("high")) spawner.highObstacleRules.Add(newRule);
                else if (p.key.ToLower().Contains("enemy")) spawner.enemyRules.Add(newRule);
                else if (p.key.ToLower().Contains("boss")) spawner.bossRules.Add(newRule);
                else spawner.pickupRules.Add(newRule);
            }
        }

        EditorUtility.SetDirty(spawner);
    }
}